{"version":3,"sources":["CurrencyInput.js","App.js","reportWebVitals.js","index.js"],"names":["CurrrencyInput","props","className","type","value","amount","onChange","e","onAmountChange","target","currency","onCurrencyChange","currencies","map","App","useState","amount1","setAmount1","amount2","setAmount2","currency1","setCurrency1","currency2","setCurrency2","loading","setLoading","rates","setRates","approxNo","number","toFixed","handleAmount1Change","useEffect","a","axios","get","result","data","console","log","getdata","Object","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAwBeA,MAtBf,SAAwBC,GACpB,OACI,sBAAKC,UAAU,QAAf,UACI,uBAAOC,KAAK,OAAOC,MAAOH,EAAMI,OAAQC,SAAU,SAAAC,GAAC,OAAIN,EAAMO,eAAeD,EAAEE,OAAOL,UACrF,wBAAQA,MAAQH,EAAMS,SAAUJ,SAAU,SAAAC,GAAC,OAAIN,EAAMU,iBAAiBJ,EAAEE,OAAOL,QAA/E,SACKH,EAAMW,WAAWC,KAAI,SAAAH,GAAQ,OACxB,wBAAuBN,MAASM,EAAhC,SAA2CA,GAA9BA,Y,iBCsEpBI,MAzEf,WAEE,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAkCJ,mBAAS,OAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,OAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA8BR,mBAAS,cAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAA0BV,mBAAS,IAAnC,mBAAOW,EAAP,KAAcC,EAAd,KA8BA,SAASC,EAASC,GAChB,OAAOA,EAAOC,QAAQ,GAGxB,SAASC,EAAoBf,GAC3BG,EAAWS,EAASZ,EAAUU,EAAMJ,GAAYI,EAAMN,KACtDH,EAAWD,GAkBb,OApDAgB,qBAAU,WAAM,4CAEd,4BAAAC,EAAA,sEACuBC,IAAMC,IAAI,uBADjC,OACQC,EADR,gBAGIT,EAASS,EAAOC,KAAKX,OACrBD,EAAW,IAJf,gDAMIA,EAAW,qBACXa,QAAQC,IAAR,MAPJ,2CAUWH,GAVX,gEAFc,uBAAC,WAAD,wBAedI,KAGC,IAGHR,qBAAU,WACHN,GACHK,EAAoB,KAGrB,CAACL,IA2BF,sBAAKxB,UAAU,OAAf,UACE,wFACA,oDACA,6BAAKsB,IACL,cAAC,EAAD,CAAgBhB,eAAgBuB,EAAqBpB,iBAnBzD,SAA+BS,GAC7BD,EAAWS,EAASZ,EAAUU,EAAMJ,GAAYI,EAAMN,KACtDC,EAAaD,IAiBmFR,WAAY6B,OAAOC,KAAKhB,GAAQrB,OAAQW,EAASN,SAAUU,IACzJ,uBACA,cAAC,EAAD,CAAgBZ,eAjBpB,SAA6BU,GAC3BD,EAAWW,EAASV,EAAUQ,EAAMN,GAAYM,EAAMJ,KACtDH,EAAWD,IAe4CP,iBAXzD,SAA+BW,GAC7BL,EAAWW,EAASV,EAAUQ,EAAMN,GAAYM,EAAMJ,KACtDC,EAAaD,IASmFV,WAAY6B,OAAOC,KAAKhB,GAAQrB,OAAQa,EAASR,SAAUY,QC7DhJqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2c9dea35.chunk.js","sourcesContent":["import PropTypes, { func } from 'prop-types'\r\nimport './currencyinput.css';\r\nfunction CurrrencyInput(props){\r\n    return (\r\n        <div className=\"group\">\r\n            <input type=\"text\" value={props.amount} onChange={e => props.onAmountChange(e.target.value)}/>\r\n            <select value ={props.currency} onChange={e => props.onCurrencyChange(e.target.value)}>\r\n                {props.currencies.map(currency =>\r\n                     (<option key={currency} value = {currency}>{currency}</option>)\r\n                     )}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nCurrrencyInput.propTypes = {\r\n    amount : PropTypes.number.isRequired,\r\n    currency: PropTypes.string.isRequired,\r\n    currencies: PropTypes.array,\r\n    onAmountChange: func,\r\n    onCurrencyChange: func\r\n\r\n}\r\n\r\nexport default CurrrencyInput;\r\n\r\n","import './App.css';\nimport CurrrencyInput from './CurrencyInput';\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\"\n\nfunction App() {\n\n  const [amount1, setAmount1] = useState(1);\n  const [amount2, setAmount2] = useState(1);\n  const [currency1, setCurrency1] = useState(\"USD\");\n  const [currency2, setCurrency2] = useState(\"NGN\");\n  const [loading, setLoading] = useState(\"loading...\");\n  const [rates, setRates] = useState([]);\n\n  useEffect(() => {\n\n    async function getdata(){\n      const result =await  axios.get('/api/v1/currencyapi');\n      try {\n        setRates(result.data.rates)\n        setLoading('')\n      } catch (error) {\n        setLoading('An error occurred')\n        console.log(error)\n      }\n      finally{\n        return result\n      }\n    }\n    getdata();\n\n\n  }, [])\n\n\n  useEffect(() => {\n    if(!!rates){\n      handleAmount1Change(1)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [rates])\n\n  function approxNo(number){\n    return number.toFixed(3)\n  }\n\n  function handleAmount1Change(amount1){\n    setAmount2(approxNo(amount1 * rates[currency2]/ rates[currency1]))\n    setAmount1(amount1)\n\n  }\n\n  function handleCurrency1Change(currency1){\n    setAmount2(approxNo(amount1 * rates[currency2]/ rates[currency1]))\n    setCurrency1(currency1)\n  }\n  function handleAmount2Change(amount2){\n    setAmount1(approxNo(amount2 * rates[currency1]/ rates[currency2]))\n    setAmount2(amount2)\n\n  }\n\n  function handleCurrency2Change(currency2){\n    setAmount1(approxNo(amount2 * rates[currency1]/ rates[currency2]))\n    setCurrency2(currency2)\n  }\n  return (\n    <div className='main'>\n      <h2>Get the latest and most accurate conversion rates now!</h2>\n      <h1>Pick Your Currency</h1>\n      <h1>{loading}</h1>\n      <CurrrencyInput onAmountChange={handleAmount1Change} onCurrencyChange={handleCurrency1Change} currencies={Object.keys(rates)} amount={amount1} currency={currency1} />\n      <br></br>\n      <CurrrencyInput onAmountChange={handleAmount2Change} onCurrencyChange={handleCurrency2Change} currencies={Object.keys(rates)} amount={amount2} currency={currency2} />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}